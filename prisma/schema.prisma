// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model Language {
  id   String  @id @default(uuid())
  code String  @unique
  name String
  slug String?

  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  contestTranslations ContestTranslations[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id String @id @default(uuid())

  siteName         String?
  siteUrl          String?
  deployWebhookUrl String?

  logoUrl String?

  /// [Scripts]
  scripts Json @default("null") @db.JsonB

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WidgetSection {
  HERO
  MODAL_POPUP
  POST_SIDEBAR
  POST_BOTTOM
}

enum WidgetType {
  SEARCH_BOX
  POST
  CATEGORY
  TAG
  PRODUCT
  NEWSLETTER
  AUTHOR
  SOCIAL
  PRODUCT_POP
  NEWSLETTER_POP
}

model Widget {
  id String @id @default(uuid())

  name    String
  section WidgetSection
  type    WidgetType
  sort    Int

  isEnabled Boolean @default(false)

  /// [WidgetMetadata]
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  EDITOR
  ADMIN
}

enum UserGender {
  UNDEFINED
  MALE
  FEMALE
  OTHER
}

model User {
  id             String  @id @default(uuid())
  externalUserId String? @unique

  name      String?
  firstName String?
  lastName  String?

  password String?

  email         String?   @unique
  emailVerified DateTime?

  image String?

  profileImage   Media?  @relation(fields: [profileImageId], references: [id], onDelete: Cascade)
  profileImageId String?

  gender      UserGender @default(UNDEFINED)
  dateOfBirth DateTime?

  accounts Account[]

  bio      String?
  imageUrl String?

  role UserRole @default(USER)

  posts       Post[]
  postAuthors PostAuthor[]

  notifications    Notification[]
  products         Product[]
  projects         Project[]
  submissions      Submission[]
  payments         Payment[]
  organizationUser OrganizationUser[]

  scores SubmissionScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum MediaType {
  AUDIO
  FILE
  IMAGE
  VIDEO
}

model Media {
  id String @id @default(uuid())

  name    String
  key     String?
  url     String    @unique @db.Text
  size    Int?
  type    MediaType @default(FILE)
  altText String?

  post             Post[]
  seo              Seo[]
  product          Product[]
  impression       Impression?
  products         ProductGallery[]
  contest          Contest[]
  organizationLogo Organization[]
  project          Project?
  submission       Submission[]
  user             User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContentStatus {
  DRAFT
  CHANGED
  PUBLISHED
}

model Seo {
  id String @id @default(uuid())

  title        String
  description  String?
  canonicalUrl String?

  version Int

  noIndex  Boolean @default(false)
  noFollow Boolean @default(false)

  ogTwitterType        String?
  ogTwitterTitle       String?
  ogTwitterDescription String?
  ogTwitterImage       Media?  @relation(fields: [ogTwitterImageId], references: [id])
  ogTwitterImageId     String?
  ogTwitterLocale      String?
  ogTwitterUrl         String?

  rootId       String?
  root         Seo?    @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Seo[]   @relation("RootChildren")

  settings Settings[]

  posts      Post[]
  categories Category[]

  tags Tag[]

  products          Product[]
  productCategories ProductCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  version Int

  status   ContentStatus @default(DRAFT)
  isLatest Boolean       @default(true)

  /// [BodyData]
  bodyData Json @db.JsonB

  rootId       String?
  root         Post?   @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Post[]  @relation("RootChildren")

  imageCover   Media?  @relation(fields: [imageCoverId], references: [id])
  imageCoverId String?

  postCategories PostCategory[]

  tags Tag[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  postAuthors PostAuthor[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  firstPublishedAt DateTime @default(now())
  publishedAt      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([rootId])
}

model PostAuthor {
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  sort Int

  @@id([postId, userId])
}

model Category {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  version Int

  status ContentStatus @default(DRAFT)

  isLatest Boolean @default(true)

  rootId       String?
  root         Category?  @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Category[] @relation("RootChildren")

  postCategories PostCategory[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  firstPublishedAt DateTime @default(now())
  publishedAt      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([rootId])
}

model PostCategory {
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  sort Int

  @@id([postId, categoryId])
}

model Tag {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  version Int

  status ContentStatus @default(DRAFT)

  isLatest Boolean @default(true)

  rootId       String?
  root         Tag?    @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Tag[]   @relation("RootChildren")

  posts Post[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  firstPublishedAt DateTime @default(now())
  publishedAt      DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([rootId])
}

enum EmailProvider {
  SENDGRID
}

model EmailSetting {
  id String @id @default(uuid())

  emailSender     String?
  emailSenderName String?
  emailResponse   String?
  emailProvider   EmailProvider?
  emailApiKey     String?

  maxEmailsPerDay Int?

  subscriptionTemplate   EmailTemplate? @relation(name: "emailSetting1", fields: [subscriptionTemplateId], references: [id], onDelete: Cascade)
  subscriptionTemplateId String?

  freeEbookTemplate   EmailTemplate? @relation(name: "emailSetting2", fields: [freeEbookTemplateId], references: [id], onDelete: Cascade)
  freeEbookTemplateId String?

  webinarTemplate   EmailTemplate? @relation(name: "emailSetting3", fields: [webinarTemplateId], references: [id], onDelete: Cascade)
  webinarTemplateId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailTemplate {
  id String @id @default(uuid())

  name        String
  description String?

  /// [EmailDesignData]
  designData Json?   @db.JsonB
  bodyHtml   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailSettingSubscription EmailSetting[] @relation(name: "emailSetting1")
  emailSettingFreeEbook    EmailSetting[] @relation(name: "emailSetting2")
  emailSettingWebinar      EmailSetting[] @relation(name: "emailSetting3")
}

enum AudienceType {
  GLOBAL
  LIST
}

model EmailAudience {
  id String @id @default(uuid())

  name        String
  type        AudienceType @default(LIST)
  description String?

  contacts EmailContact[]

  // emailSingleSend   EmailSingleSend? @relation(fields: [emailSingleSendId], references: [id])
  // emailSingleSendId String?
  emailSingleSends EmailSingleSend[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailContact {
  id String @id @default(uuid())

  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?

  isSubscriber Boolean @default(true)

  audiences           EmailAudience[]
  interactions        EmailContactInteraction[]
  emailSingleSendLogs EmailSingleSendLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailContactInteraction {
  id String @id @default(uuid())

  interactionType String // es. 'newsletter_subscription', 'first_feedback_request', 'ebook_download'
  interactionDate DateTime @default(now())

  contact   EmailContact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, interactionType])
}

model EmailSingleSend {
  id String @id @default(uuid())

  name    String
  subject String?

  /// [EmailDesignData]
  designData Json?   @db.JsonB
  bodyHtml   String?

  audiences           EmailAudience[]
  emailSingleSendLogs EmailSingleSendLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailSubscriptionToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model EmailSendLog {
  id String @id @default(uuid())

  to      String
  from    String
  subject String?

  type String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailSingleSendLog {
  id String @id @default(uuid())

  contact   EmailContact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String

  singleSend   EmailSingleSend @relation(fields: [singleSendId], references: [id], onDelete: Cascade)
  singleSendId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, singleSendId])
}

enum ProductType {
  EBOOK
  SERVICE
  AFFILIATE
  WEBINAR
}

model Product {
  id    String @id @default(uuid())
  title String
  slug  String

  /// [BodyData]
  description Json @db.JsonB

  type ProductType

  version Int

  status ContentStatus @default(DRAFT)

  isLatest Boolean @default(true)

  imageCover   Media?  @relation(fields: [imageCoverId], references: [id])
  imageCoverId String?

  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  price           Float?
  discountedPrice Float?
  isFree          Boolean @default(false)

  /// [ProductMetadata]
  metadata Json?          @db.JsonB
  extras   ProductExtra[]

  rootId       String?
  root         Product?  @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Product[] @relation("RootChildren")

  gallery ProductGallery[]
  faqs    ProductFAQ[]

  purchases Purchase[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategory {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  version Int

  status ContentStatus @default(DRAFT)

  isLatest Boolean @default(true)

  rootId       String?
  root         ProductCategory?  @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren ProductCategory[] @relation("RootChildren")

  products Product[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  firstPublishedAt DateTime @default(now())
  publishedAt      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ProductGallery {
  id   String @id @default(cuid())
  sort Int // Campo per l'ordinamento

  // Relazioni
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  mediaId String
  media   Media  @relation(fields: [mediaId], references: [id])

  @@unique([productId, mediaId])
}

model ProductExtra {
  id String @id @default(uuid())

  name        String
  description String?
  price       Float
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductFAQ {
  id String @id @default(uuid())

  question String
  answer   String
  sort     Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id String @id @default(uuid())

  email String

  product       Product @relation(fields: [productId], references: [id])
  productId     String
  productRootId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactForm {
  id String @id @default(uuid())

  name    String?
  email   String?
  subject String?
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id String @id @default(uuid())

  name String
  slug String @unique

  logo   Media?  @relation(fields: [logoId], references: [id])
  logoId String?

  email       String?
  website     String?
  description String?

  stripeAccountId String?

  contests          Contest[]
  organizationUsers OrganizationUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrgRole {
  ADMIN
  REVIEWER
  VIEWER
}

model OrganizationUser {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  role     OrgRole @default(VIEWER) // enum: ADMIN, REVIEWER, VIEWER, ecc.
  isActive Boolean @default(false)

  @@unique([userId, organizationId])
}

model Contest {
  id String @id @default(uuid())

  name String
  slug String

  shortDescription String?

  /// [BodyData]
  description Json? @db.JsonB
  /// [BodyData]
  benefits    Json? @db.JsonB
  /// [BodyData]
  rules       Json? @db.JsonB

  version  Int
  isLatest Boolean @default(true)

  status ContentStatus @default(DRAFT)

  isOpen Boolean @default(false)

  imageCover   Media?  @relation(fields: [imageCoverId], references: [id])
  imageCoverId String?

  rootId       String?
  root         Contest?  @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Contest[] @relation("RootChildren")

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  translations ContestTranslations[]

  categories ContestCategory[]
  deadlines  ContestDeadline[]
  prices     ContestPrice[]
  stages     ContestSelectionStage[]

  submissions Submission[]

  nextDeadline DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([rootId, status])
}

model ContestTranslations {
  id String @id @default(uuid())

  name String
  slug String

  shortDescription String?

  /// [BodyData]
  description Json? @db.JsonB
  /// [BodyData]
  benefits    Json? @db.JsonB
  /// [BodyData]
  rules       Json? @db.JsonB

  language   Language @relation(fields: [languageId], references: [id])
  languageId String

  contestId String
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContestDeadline {
  id   String   @id @default(uuid())
  date DateTime
  name String

  contestId String
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  prices ContestPrice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContestCategory {
  id   String @id @default(uuid())
  name String

  formatId String?
  format   Format? @relation(fields: [formatId], references: [id])

  genreId String?
  genre   Genre?  @relation(fields: [genreId], references: [id])

  contestId String
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  prices ContestPrice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContestPrice {
  id String @id @default(uuid())

  contestId String
  contest   Contest? @relation(fields: [contestId], references: [id])

  categoryId String
  category   ContestCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  deadlineId String
  deadline   ContestDeadline @relation(fields: [deadlineId], references: [id], onDelete: Cascade)

  price Float @default(0)

  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContestSelectionStage {
  id String @id @default(uuid())

  name    String // Es. "Quarti di finale", "Finalisti"
  date    DateTime
  isFinal Boolean  @default(false) // Se è la fase finale (utile per i vincitori)

  contestId String
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  selections SubmissionSelection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contestId, name])
}

model Format {
  id String @id @default(uuid())

  title             String
  Impression        Impression[]
  projects          Project[]
  submission        Submission[]
  contestCategories ContestCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id String @id @default(uuid())

  title             String
  Impression        Impression[]
  projects          Project[]
  submission        Submission[]
  contestCategories ContestCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(uuid())

  title   String
  logline String

  email     String?
  pageCount Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  authors ProjectAuthor[]

  format   Format? @relation(fields: [formatId], references: [id])
  formatId String?

  genre   Genre?  @relation(fields: [genreId], references: [id])
  genreId String?

  file   Media?  @relation(fields: [fileId], references: [id])
  fileId String? @unique

  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectAuthor {
  id String @id @default(uuid())

  firstName String
  lastName  String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  REJECTED
  ACCEPTED
}

enum PaymentStatus {
  PENDING
  PAID
  UNPAID
  REFUNDED
}

model Payment {
  id String @id @default(cuid())

  stripeIntentId String

  amount Float?

  currency String  @default("eur")
  method   String? // es. card, se vuoi loggarlo

  status PaymentStatus @default(PENDING)

  submission Submission?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id String @id @default(uuid())

  title   String
  logline String

  email     String
  pageCount Int?

  authors ProjectAuthor[]

  format   Format? @relation(fields: [formatId], references: [id])
  formatId String?

  genre   Genre?  @relation(fields: [genreId], references: [id])
  genreId String?

  file   Media?  @relation(fields: [fileId], references: [id])
  fileId String? @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId String

  category   ContestPrice @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId String?  @unique

  status SubmissionStatus @default(PENDING)

  selections SubmissionSelection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubmissionSelection {
  id String @id @default(uuid())

  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  stageId String
  stage   ContestSelectionStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  scores SubmissionScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([submissionId, stageId])
}

model SubmissionScore {
  id String @id @default(cuid())

  overall    Float
  plot       Float
  characters Float
  concept    Float
  structure  Float
  dialogue   Float

  stageId String
  stage   SubmissionSelection @relation(fields: [stageId], references: [id])

  judge   User   @relation(fields: [judgeId], references: [id])
  judgeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([stageId, judgeId])
}

model Impression {
  id        String  @id @default(uuid())
  title     String
  firstName String?
  lastName  String?
  email     String
  pageCount Int?

  format   Format? @relation(fields: [formatId], references: [id])
  formatId String?

  genre   Genre?  @relation(fields: [genreId], references: [id])
  genreId String?

  file   Media?  @relation(fields: [fileId], references: [id])
  fileId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type    String
  message String
  isRead  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SocialKey {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  PINTEREST
  YOUTUBE
}

enum SocialEntityType {
  SITE
  USER
}

model SocialChannel {
  id String @id @default(uuid())

  key SocialKey
  url String?

  entityId   String
  entityType SocialEntityType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, entityId, entityType])
}
