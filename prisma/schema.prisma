// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  EDITOR
  ADMIN
}

model User {
  id             String @id @default(uuid())
  externalUserId String @unique
  imageUrl       String @db.Text

  role UserRole @default(USER)

  posts Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  AUDIO
  FILE
  IMAGE
  VIDEO
}

model Media {
  id String @id @default(uuid())

  name    String
  url     String    @unique @db.Text
  size    Int?
  type    MediaType @default(FILE)
  altText String?

  post        Post[]
  postVersion PostVersion[]

  seo        Seo[]
  seoVersion SeoVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seo {
  id String @id @default(uuid())

  title        String
  description  String?
  canonicalUrl String?

  noIndex  Boolean @default(false)
  noFollow Boolean @default(false)

  ogTwitterType        String?
  ogTwitterTitle       String?
  ogTwitterDescription String?
  ogTwitterImage       Media?  @relation(fields: [ogTwitterImageId], references: [id])
  ogTwitterImageId     String?
  ogTwitterLocale      String?
  ogTwitterUrl         String?

  isPublished Boolean @default(false)

  post   Post?   @relation(references: [id], fields: [postId], onDelete: Cascade)
  postId String? @unique

  category   Category? @relation(references: [id], fields: [categoryId], onDelete: Cascade)
  categoryId String?   @unique

  tag   Tag?    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String? @unique

  versions SeoVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeoVersion {
  id String @id @default(uuid())

  seoId String
  seo   Seo    @relation(fields: [seoId], references: [id], onDelete: Cascade)

  title        String
  description  String?
  canonicalUrl String?

  noIndex  Boolean @default(false)
  noFollow Boolean @default(false)

  ogTwitterType        String?
  ogTwitterTitle       String?
  ogTwitterDescription String?
  ogTwitterImage       Media?  @relation(fields: [ogTwitterImageId], references: [id])
  ogTwitterImageId     String?
  ogTwitterLocale      String?
  ogTwitterUrl         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(uuid())

  title       String  @unique
  slug        String  @unique
  description String?

  imageCover   Media?  @relation(fields: [imageCoverId], references: [id])
  imageCoverId String?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  /// [BodyData]
  bodyData Json @db.JsonB

  isPublished Boolean @default(false)

  tags Tag[]

  versions PostVersion[]

  seo Seo?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostVersion {
  id String @id @default(uuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  title       String
  slug        String
  description String?

  imageCover   Media?  @relation(fields: [imageCoverId], references: [id])
  imageCoverId String?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  tags Tag[]

  /// [BodyData]
  bodyData Json @db.JsonB

  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([postId])
}

model Category {
  id String @id @default(uuid())

  title       String  @unique
  slug        String  @unique
  description String?

  isPublished Boolean @default(false)

  versions CategoryVersion[]

  seo Seo?

  posts       Post[]
  postVersion PostVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryVersion {
  id String @id @default(uuid())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  title       String
  slug        String
  description String?

  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}

model Tag {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  posts Post[]

  isPublished Boolean @default(false)

  versions     TagVersion[]
  postVersions PostVersion[]

  seo Seo?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TagVersion {
  id String @id @default(uuid())

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  title       String  @unique
  slug        String  @unique
  description String?

  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tagId])
}

model EmailTemplate {
  id String @id @default(uuid())

  name        String
  description String?

  templateData Json? @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
