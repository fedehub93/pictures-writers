// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  EDITOR
  ADMIN
}

model User {
  id             String @id @default(uuid())
  externalUserId String @unique

  firstName String?
  lastName  String?
  email     String?
  bio       String?
  imageUrl  String?

  role UserRole @default(USER)

  posts         Post[]
  ebooks        Ebook[]
  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  AUDIO
  FILE
  IMAGE
  VIDEO
}

model Media {
  id String @id @default(uuid())

  name    String
  key     String?
  url     String    @unique @db.Text
  size    Int?
  type    MediaType @default(FILE)
  altText String?

  post       Post[]
  seo        Seo[]
  impression Impression?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContentStatus {
  DRAFT
  CHANGED
  PUBLISHED
}

model Seo {
  id String @id @default(uuid())

  title        String
  description  String?
  canonicalUrl String?

  version Int

  noIndex  Boolean @default(false)
  noFollow Boolean @default(false)

  ogTwitterType        String?
  ogTwitterTitle       String?
  ogTwitterDescription String?
  ogTwitterImage       Media?  @relation(fields: [ogTwitterImageId], references: [id])
  ogTwitterImageId     String?
  ogTwitterLocale      String?
  ogTwitterUrl         String?

  rootId       String?
  root         Seo?    @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Seo[]   @relation("RootChildren")

  posts Post[]

  categories Category[]

  tags Tag[]

  ebook Ebook[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  version Int

  status   ContentStatus @default(DRAFT)
  isLatest Boolean       @default(true)

  /// [BodyData]
  bodyData Json @db.JsonB

  rootId       String?
  root         Post?   @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Post[]  @relation("RootChildren")

  imageCover   Media?  @relation(fields: [imageCoverId], references: [id])
  imageCoverId String?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  tags Tag[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  firstPublishedAt DateTime @default(now())
  publishedAt      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([rootId])
}

model Category {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  version Int

  status ContentStatus @default(DRAFT)

  isLatest Boolean @default(true)

  rootId       String?
  root         Category?  @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Category[] @relation("RootChildren")

  posts Post[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  firstPublishedAt DateTime @default(now())
  publishedAt      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([rootId])
}

model Tag {
  id String @id @default(uuid())

  title       String
  slug        String
  description String?

  version Int

  status ContentStatus @default(DRAFT)

  isLatest Boolean @default(true)

  rootId       String?
  root         Tag?    @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Tag[]   @relation("RootChildren")

  posts Post[]

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  firstPublishedAt DateTime @default(now())
  publishedAt      DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([rootId])
}

enum EmailProvider {
  SENDGRID
}

model EmailSetting {
  id String @id @default(uuid())

  emailSender   String?
  emailResponse String?
  emailProvider EmailProvider?
  emailApiKey   String?

  subscriptionTemplate   EmailTemplate? @relation(name: "emailSetting1", fields: [subscriptionTemplateId], references: [id], onDelete: Cascade)
  subscriptionTemplateId String?

  freeEbookTemplate   EmailTemplate? @relation(name: "emailSetting2", fields: [freeEbookTemplateId], references: [id], onDelete: Cascade)
  freeEbookTemplateId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailTemplate {
  id String @id @default(uuid())

  name        String
  description String?

  /// [EmailDesignData]
  designData Json?   @db.JsonB
  bodyHtml   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  emailSettingSubscription EmailSetting[] @relation(name: "emailSetting1")
  emailSettingFreeEbook    EmailSetting[] @relation(name: "emailSetting2")
}

enum AudienceType {
  GLOBAL
  LIST
}

model EmailAudience {
  id String @id @default(uuid())

  name        String
  type        AudienceType @default(LIST)
  description String?

  contacts EmailContact[]

  emailSingleSend   EmailSingleSend? @relation(fields: [emailSingleSendId], references: [id])
  emailSingleSendId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailContact {
  id String @id @default(uuid())

  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?

  audiences    EmailAudience[]
  isSubscriber Boolean         @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailSingleSend {
  id String @id @default(uuid())

  name    String
  subject String?

  audiences EmailAudience[]

  /// [EmailDesignData]
  designData Json?   @db.JsonB
  bodyHtml   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailSubscriptionToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model Ebook {
  id String @id @default(uuid())

  title       String
  description String?

  version Int

  status ContentStatus @default(DRAFT)

  isLatest Boolean @default(true)

  imageCoverUrl String?
  fileUrl       String?

  rootId       String?
  root         Ebook?  @relation("RootChildren", fields: [rootId], references: [id])
  rootChildren Ebook[] @relation("RootChildren")

  seo   Seo?    @relation(fields: [seoId], references: [id])
  seoId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactForm {
  id String @id @default(uuid())

  name    String
  email   String
  subject String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Format {
  id String @id @default(uuid())

  title      String
  Impression Impression[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id String @id @default(uuid())

  title      String
  Impression Impression[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Impression {
  id        String  @id @default(uuid())
  title     String
  firstName String?
  lastName  String?
  email     String
  pageCount Int?

  format   Format? @relation(fields: [formatId], references: [id])
  formatId String?

  genre   Genre?  @relation(fields: [genreId], references: [id])
  genreId String?

  file   Media?  @relation(fields: [fileId], references: [id])
  fileId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type    String
  message String
  isRead  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
